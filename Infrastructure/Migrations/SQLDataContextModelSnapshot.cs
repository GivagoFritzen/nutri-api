// <auto-generated />
using System;
using Infrastructure.Data.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SQLDataContext))]
    partial class SQLDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entity.AlimentoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Medida")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<Guid>("RefeicaoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefeicaoEntityId");

                    b.ToTable("AlimentoEntity");
                });

            modelBuilder.Entity("Domain.Entity.MedidaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Altura")
                        .HasColumnType("real");

                    b.Property<Guid>("CircunferenciaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PesoAtual")
                        .HasColumnType("real");

                    b.Property<float>("PesoIdeal")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CircunferenciaId")
                        .IsUnique();

                    b.HasIndex("PacienteEntityId");

                    b.ToTable("MedidaEntity");
                });

            modelBuilder.Entity("Domain.Entity.Medidas.CircunferenciaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Abdomen")
                        .HasColumnType("real");

                    b.Property<float>("AntebracoDireito")
                        .HasColumnType("real");

                    b.Property<float>("AntebracoEsquerdo")
                        .HasColumnType("real");

                    b.Property<float>("BracoContraidoDireito")
                        .HasColumnType("real");

                    b.Property<float>("BracoContraidoEsquerdo")
                        .HasColumnType("real");

                    b.Property<float>("BracoRelaxadoDireito")
                        .HasColumnType("real");

                    b.Property<float>("BracoRelaxadoEsquerdo")
                        .HasColumnType("real");

                    b.Property<float>("Cintura")
                        .HasColumnType("real");

                    b.Property<float>("CoxaDireita")
                        .HasColumnType("real");

                    b.Property<float>("CoxaEsquerda")
                        .HasColumnType("real");

                    b.Property<float>("CoxaProximalDireita")
                        .HasColumnType("real");

                    b.Property<float>("CoxaProximalEsquerda")
                        .HasColumnType("real");

                    b.Property<float>("Ombro")
                        .HasColumnType("real");

                    b.Property<float>("PanturrilhaDireita")
                        .HasColumnType("real");

                    b.Property<float>("PanturrilhaEsquerda")
                        .HasColumnType("real");

                    b.Property<float>("Peitoral")
                        .HasColumnType("real");

                    b.Property<float>("Pescoco")
                        .HasColumnType("real");

                    b.Property<float>("PunhoDireito")
                        .HasColumnType("real");

                    b.Property<float>("PunhoEsquerdo")
                        .HasColumnType("real");

                    b.Property<float>("Quadril")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CircuferenciaEntity");
                });

            modelBuilder.Entity("Domain.Entity.NutricionistaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sexo")
                        .HasColumnType("bit");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nutricionistas");
                });

            modelBuilder.Entity("Domain.Entity.PacienteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NutricionistaEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sexo")
                        .HasColumnType("bit");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NutricionistaEntityId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Domain.Entity.PlanoAlimentarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PacienteEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteEntityId");

                    b.ToTable("PlanoAlimentarEntity");
                });

            modelBuilder.Entity("Domain.Entity.RefeicaoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlanoAlimentarEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanoAlimentarEntityId");

                    b.ToTable("RefeicaoEntity");
                });

            modelBuilder.Entity("Domain.Entity.AlimentoEntity", b =>
                {
                    b.HasOne("Domain.Entity.RefeicaoEntity", "Refeicao")
                        .WithMany("Alimentos")
                        .HasForeignKey("RefeicaoEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Refeicao");
                });

            modelBuilder.Entity("Domain.Entity.MedidaEntity", b =>
                {
                    b.HasOne("Domain.Entity.Medidas.CircunferenciaEntity", "Circunferencia")
                        .WithOne("Medida")
                        .HasForeignKey("Domain.Entity.MedidaEntity", "CircunferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.PacienteEntity", "Paciente")
                        .WithMany("Medidas")
                        .HasForeignKey("PacienteEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circunferencia");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entity.PacienteEntity", b =>
                {
                    b.HasOne("Domain.Entity.NutricionistaEntity", "Nutricionista")
                        .WithMany("Pacientes")
                        .HasForeignKey("NutricionistaEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutricionista");
                });

            modelBuilder.Entity("Domain.Entity.PlanoAlimentarEntity", b =>
                {
                    b.HasOne("Domain.Entity.PacienteEntity", "Paciente")
                        .WithMany("PlanosAlimentares")
                        .HasForeignKey("PacienteEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entity.RefeicaoEntity", b =>
                {
                    b.HasOne("Domain.Entity.PlanoAlimentarEntity", "PlanoAlimentar")
                        .WithMany("Refeicoes")
                        .HasForeignKey("PlanoAlimentarEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanoAlimentar");
                });

            modelBuilder.Entity("Domain.Entity.Medidas.CircunferenciaEntity", b =>
                {
                    b.Navigation("Medida");
                });

            modelBuilder.Entity("Domain.Entity.NutricionistaEntity", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Domain.Entity.PacienteEntity", b =>
                {
                    b.Navigation("Medidas");

                    b.Navigation("PlanosAlimentares");
                });

            modelBuilder.Entity("Domain.Entity.PlanoAlimentarEntity", b =>
                {
                    b.Navigation("Refeicoes");
                });

            modelBuilder.Entity("Domain.Entity.RefeicaoEntity", b =>
                {
                    b.Navigation("Alimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
